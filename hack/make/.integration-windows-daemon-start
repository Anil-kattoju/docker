#!/bin/bash

# see test-integration-cli for example usage of this script

export PATH="$ABS_DEST/../binary:$ABS_DEST/../dynbinary:$ABS_DEST/../gccgo:$ABS_DEST/../dyngccgo:$PATH"

if ! command -v docker &> /dev/null; then
	echo >&2 'error: binary or dynbinary must be run before .integration-daemon-start'
	false
fi

# intentionally open a couple bogus file descriptors to help test that they get scrubbed in containers
exec 41>&1 42>&2

export DOCKER_GRAPHDRIVER=${DOCKER_GRAPHDRIVER:-windowsfilter}
export DOCKER_EXECDRIVER=${DOCKER_EXECDRIVER:-windows}
export DOCKER_BRIDGE=${DOCKER_BRIDGE:-ContainerNAT}

( set -x; exec \
	docker daemon --debug \
	--storage-driver "$DOCKER_GRAPHDRIVER" \
	--pidfile "$DEST/docker.pid" \
	--exec-driver "$DOCKER_EXECDRIVER" \
	--bridge="$DOCKER_BRIDGE" \
	&> "$DEST/docker.log"
) &
# make sure that if the script exits unexpectedly, we stop this daemon we just started
trap 'bundle .integration-windows-daemon-stop' EXIT

# give it a little time to come up so it's "ready"
tries=30
while ! docker version &> /dev/null; do
	(( tries-- ))
	if [ $tries -le 0 ]; then
		if [ -z "$DOCKER_HOST" ]; then
			echo >&2 "error: daemon failed to start"
			echo >&2 "  check $DEST/docker.log for details"
		else
			echo >&2 "error: daemon at $DOCKER_HOST fails to 'docker version':"
			docker version >&2 || true
		fi
		false
	fi
	sleep 2
done
